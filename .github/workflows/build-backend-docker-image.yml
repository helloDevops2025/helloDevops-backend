name: Build and Run Backend

on:
  # ✅ 1. ให้รันอัตโนมัติเมื่อ push และ pull request เข้า branch หลัก
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

  # ✅ 2. รันด้วยตนเองได้
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ ดึงโค้ดจาก GitHub
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️⃣ ตั้งค่า Java (ใช้ JDK 21)
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      # 3️⃣ Build ด้วย Gradle
      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      # 🧪 รัน test พร้อมเก็บรายงาน (JUnit XML + Jacoco coverage)
      - name: Run Gradle tests and generate reports
        run: |
          ./gradlew test jacocoTestReport
        continue-on-error: true
      
      # 📦 อัปโหลดผล test XML ไว้เป็น Artifact (ดาวน์โหลดได้)
      - name: Upload test result XML
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-test-results
          path: build/test-results/test/
      
      # 🧭 แสดงผล Test Summary บนหน้า GitHub Actions Run
      - name: Publish Test Summary
        if: always()
        uses: test-summary/action@v2
        with:
          paths: "build/test-results/**/*.xml"

      # 4️⃣ Build Docker image จาก Dockerfile โดยตรง
      - name: Build Docker image
        run: |
          docker build -t hello-devops-backend:latest .

      # 5️⃣ ทดสอบรัน container (optional)
      - name: Run container for test
        run: |
          docker run -d --name backend-test -p 8080:8080 hello-devops-backend:latest
          echo "⏳ Waiting for app to start..."
          sleep 10
          docker ps
          docker logs backend-test || true

      # ✅ 5.1 เก็บ log ของ container เป็น report
      - name: Save backend logs
        if: always()
        run: |
          mkdir -p reports
          docker logs backend-test > reports/backend_log.txt || true
          echo "📦 Saved logs to reports/backend_log.txt"
      
      # ✅ 5.2 เก็บผลการ build/test จาก Gradle (ถ้ามี)
      - name: Collect Gradle reports
        if: always()
        run: |
          mkdir -p reports
          cp -r build/reports/* reports/ || true
          cp -r build/test-results/* reports/ || true
      
      # ✅ 5.3 อัปโหลดไฟล์รายงานขึ้น GitHub Actions Artifacts
      - name: Upload build reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-reports
          path: reports/
    
      # 6️⃣ Clean up
      - name: Clean up containers
        if: always()
        run: |
          docker stop backend-test || true
          docker rm backend-test || true

      - name: Login to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u u6687032 --password-stdin

      # 🧱 Build and push backend
      - name: Build and push backend image
        if: success()
        run: |
          docker build -t hello-devops-backend:latest .
          docker tag hello-devops-backend:latest u6687032/hellodevops-backend:latest
          docker push u6687032/hellodevops-backend:latest

      #      #  (CD) Deploy เข้า Kubernetes cluster
      # - name: Set up kubectl
      #   uses: azure/setup-kubectl@v4
      #   with:
      #     version: 'latest'

      # - name: Configure kubeconfig
      #   run: |
      #     echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig.yaml
      #     export KUBECONFIG=$PWD/kubeconfig.yaml

      # - name: Deploy to Kubernetes
      #   run: |
      #     echo "🚀 Deploying to K8s..."
      #     kubectl set image deployment/backend-deploy backend=u6687032/hellodevops-backend:latest --namespace=prod
      #     kubectl rollout status deployment/backend-deploy --namespace=prod
